// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.6
// source: update-service.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UpdateService_PingFunction_FullMethodName                = "/proto.UpdateService/PingFunction"
	UpdateService_AddDeployment_FullMethodName               = "/proto.UpdateService/AddDeployment"
	UpdateService_GetDeployment_FullMethodName               = "/proto.UpdateService/GetDeployment"
	UpdateService_GetDeploymentOwnedRevisions_FullMethodName = "/proto.UpdateService/GetDeploymentOwnedRevisions"
	UpdateService_RollbackRevision_FullMethodName            = "/proto.UpdateService/RollbackRevision"
)

// UpdateServiceClient is the client API for UpdateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UpdateServiceClient interface {
	PingFunction(ctx context.Context, in *Ping, opts ...grpc.CallOption) (*Pong, error)
	AddDeployment(ctx context.Context, in *AddDeploymentReq, opts ...grpc.CallOption) (*AddDeploymentResp, error)
	GetDeployment(ctx context.Context, in *GetDeploymentReq, opts ...grpc.CallOption) (*GetDeploymentResp, error)
	GetDeploymentOwnedRevisions(ctx context.Context, in *GetDeploymentOwnedRevisionsReq, opts ...grpc.CallOption) (*GetDeploymentOwnedRevisionsResp, error)
	RollbackRevision(ctx context.Context, in *RollbackRevisionReq, opts ...grpc.CallOption) (*RollbackRevisionResp, error)
}

type updateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUpdateServiceClient(cc grpc.ClientConnInterface) UpdateServiceClient {
	return &updateServiceClient{cc}
}

func (c *updateServiceClient) PingFunction(ctx context.Context, in *Ping, opts ...grpc.CallOption) (*Pong, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Pong)
	err := c.cc.Invoke(ctx, UpdateService_PingFunction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *updateServiceClient) AddDeployment(ctx context.Context, in *AddDeploymentReq, opts ...grpc.CallOption) (*AddDeploymentResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddDeploymentResp)
	err := c.cc.Invoke(ctx, UpdateService_AddDeployment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *updateServiceClient) GetDeployment(ctx context.Context, in *GetDeploymentReq, opts ...grpc.CallOption) (*GetDeploymentResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDeploymentResp)
	err := c.cc.Invoke(ctx, UpdateService_GetDeployment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *updateServiceClient) GetDeploymentOwnedRevisions(ctx context.Context, in *GetDeploymentOwnedRevisionsReq, opts ...grpc.CallOption) (*GetDeploymentOwnedRevisionsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDeploymentOwnedRevisionsResp)
	err := c.cc.Invoke(ctx, UpdateService_GetDeploymentOwnedRevisions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *updateServiceClient) RollbackRevision(ctx context.Context, in *RollbackRevisionReq, opts ...grpc.CallOption) (*RollbackRevisionResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RollbackRevisionResp)
	err := c.cc.Invoke(ctx, UpdateService_RollbackRevision_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UpdateServiceServer is the server API for UpdateService service.
// All implementations must embed UnimplementedUpdateServiceServer
// for forward compatibility.
type UpdateServiceServer interface {
	PingFunction(context.Context, *Ping) (*Pong, error)
	AddDeployment(context.Context, *AddDeploymentReq) (*AddDeploymentResp, error)
	GetDeployment(context.Context, *GetDeploymentReq) (*GetDeploymentResp, error)
	GetDeploymentOwnedRevisions(context.Context, *GetDeploymentOwnedRevisionsReq) (*GetDeploymentOwnedRevisionsResp, error)
	RollbackRevision(context.Context, *RollbackRevisionReq) (*RollbackRevisionResp, error)
	mustEmbedUnimplementedUpdateServiceServer()
}

// UnimplementedUpdateServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUpdateServiceServer struct{}

func (UnimplementedUpdateServiceServer) PingFunction(context.Context, *Ping) (*Pong, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PingFunction not implemented")
}
func (UnimplementedUpdateServiceServer) AddDeployment(context.Context, *AddDeploymentReq) (*AddDeploymentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDeployment not implemented")
}
func (UnimplementedUpdateServiceServer) GetDeployment(context.Context, *GetDeploymentReq) (*GetDeploymentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeployment not implemented")
}
func (UnimplementedUpdateServiceServer) GetDeploymentOwnedRevisions(context.Context, *GetDeploymentOwnedRevisionsReq) (*GetDeploymentOwnedRevisionsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeploymentOwnedRevisions not implemented")
}
func (UnimplementedUpdateServiceServer) RollbackRevision(context.Context, *RollbackRevisionReq) (*RollbackRevisionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RollbackRevision not implemented")
}
func (UnimplementedUpdateServiceServer) mustEmbedUnimplementedUpdateServiceServer() {}
func (UnimplementedUpdateServiceServer) testEmbeddedByValue()                       {}

// UnsafeUpdateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UpdateServiceServer will
// result in compilation errors.
type UnsafeUpdateServiceServer interface {
	mustEmbedUnimplementedUpdateServiceServer()
}

func RegisterUpdateServiceServer(s grpc.ServiceRegistrar, srv UpdateServiceServer) {
	// If the following call pancis, it indicates UnimplementedUpdateServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UpdateService_ServiceDesc, srv)
}

func _UpdateService_PingFunction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ping)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpdateServiceServer).PingFunction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UpdateService_PingFunction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpdateServiceServer).PingFunction(ctx, req.(*Ping))
	}
	return interceptor(ctx, in, info, handler)
}

func _UpdateService_AddDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDeploymentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpdateServiceServer).AddDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UpdateService_AddDeployment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpdateServiceServer).AddDeployment(ctx, req.(*AddDeploymentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UpdateService_GetDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeploymentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpdateServiceServer).GetDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UpdateService_GetDeployment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpdateServiceServer).GetDeployment(ctx, req.(*GetDeploymentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UpdateService_GetDeploymentOwnedRevisions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeploymentOwnedRevisionsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpdateServiceServer).GetDeploymentOwnedRevisions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UpdateService_GetDeploymentOwnedRevisions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpdateServiceServer).GetDeploymentOwnedRevisions(ctx, req.(*GetDeploymentOwnedRevisionsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UpdateService_RollbackRevision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RollbackRevisionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpdateServiceServer).RollbackRevision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UpdateService_RollbackRevision_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpdateServiceServer).RollbackRevision(ctx, req.(*RollbackRevisionReq))
	}
	return interceptor(ctx, in, info, handler)
}

// UpdateService_ServiceDesc is the grpc.ServiceDesc for UpdateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UpdateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.UpdateService",
	HandlerType: (*UpdateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PingFunction",
			Handler:    _UpdateService_PingFunction_Handler,
		},
		{
			MethodName: "AddDeployment",
			Handler:    _UpdateService_AddDeployment_Handler,
		},
		{
			MethodName: "GetDeployment",
			Handler:    _UpdateService_GetDeployment_Handler,
		},
		{
			MethodName: "GetDeploymentOwnedRevisions",
			Handler:    _UpdateService_GetDeploymentOwnedRevisions_Handler,
		},
		{
			MethodName: "RollbackRevision",
			Handler:    _UpdateService_RollbackRevision_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "update-service.proto",
}
